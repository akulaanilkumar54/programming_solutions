//Question:
//You are given an array prices where prices[i] is the price of a given stock on the ith day.

//You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

//Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

//Example 1:

//Input: prices = [7,1,5,3,6,4]
//Output: 5
//Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
//Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

       //solution

class Solution {
    public int maxProfit(int[] p) {
        // brute force
//         int profit=-1;
//         for(int i=0;i<p.length;i++)
//         {
//             int b=p[i];
//             int sell;
//             if(i!=p.length-1)
//             sell=max(p,i+1,p.length);
//             else
//                 sell=-1;
//             if(profit<(sell-b))
//                 profit=sell-b;
            
//         }
//         return (profit>0?profit:0);
//     }
//     public static int max(int[] a,int i,int j)
//     {
//         int ma=a[i];
//         for(int k=i+1;k<j;k++)
//         {
//             if(ma<a[k])
//                 ma=a[k];
//         }
//         return ma;
//     }
        int min=Integer.MAX_VALUE;
        int prof=0;
        for (int i=0;i<p.length;i++)
        {
            if(min>p[i])
            {
                min=p[i];
            }
            if(prof<(p[i]-min))
                prof=p[i]-min;
        }
        return prof;
    }
}class Solution {
    public int maxProfit(int[] p) {
        // brute force
//         int profit=-1;
//         for(int i=0;i<p.length;i++)
//         {
//             int b=p[i];
//             int sell;
//             if(i!=p.length-1)
//             sell=max(p,i+1,p.length);
//             else
//                 sell=-1;
//             if(profit<(sell-b))
//                 profit=sell-b;
            
//         }
//         return (profit>0?profit:0);
//     }
//     public static int max(int[] a,int i,int j)
//     {
//         int ma=a[i];
//         for(int k=i+1;k<j;k++)
//         {
//             if(ma<a[k])
//                 ma=a[k];
//         }
//         return ma;
//     }
        int min=Integer.MAX_VALUE;
        int prof=0;
        for (int i=0;i<p.length;i++)
        {
            if(min>p[i])
            {
                min=p[i];
            }
            if(prof<(p[i]-min))
                prof=p[i]-min;
        }
        return prof;
    }
}
